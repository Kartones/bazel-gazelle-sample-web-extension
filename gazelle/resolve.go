// Copyright 2019 The Bazel Authors. All rights reserved.
// Modifications copyright (C) 2021 BenchSci Analytics Inc.
// Modifications copyright (C) 2018 Ecosia GmbH

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package web

import (
	"log"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
	extensionConfig "github.com/kartones/bazel-gazelle-sample-web-extension/gazelle/config"
)

// maps resolve.Resolver -> *Web
// Resolver is an interface that language extensions can implement to resolve
// dependencies in rules they generate.

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (lang *Web) Imports(c *config.Config, r *rule.Rule, f *rule.File) []resolve.ImportSpec {
	webConfigs := c.Exts[languageName].(extensionConfig.WebConfigs)
	webConfig := webConfigs[f.Pkg]

	importSpecs := make([]resolve.ImportSpec, 0)

	if !webConfig.ExtensionEnabled {
		return importSpecs
	}
	if webConfig.Verbose {
		log.Printf("Imports()   - '%s/%s (%s)'", f.Pkg, r.Name(), r.Kind())
	}

	// TODO: Imports similar to https://github.com/benchsci/rules_nodejs_gazelle/blob/main/gazelle/resolve.go

	return importSpecs
}

// https://www.typescriptlang.org/docs/handbook/module-resolution.html#classic
// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each
// rule generated by language.GenerateRules in
// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
// the appropriate language-specific equivalent) for each import according to
// language-specific rules and heuristics.
func (lang *Web) Resolve(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, r *rule.Rule,
	imports interface{}, from label.Label) {

	webConfigs := c.Exts[languageName].(extensionConfig.WebConfigs)
	webConfig := webConfigs[from.Pkg]

	if !webConfig.ExtensionEnabled {
		return
	}
	if webConfig.Verbose {
		log.Printf("Resolve()   - '%s/%s (%s)'", from.Pkg, r.Name(), r.Kind())
	}

	// TODO: Resolve similar to https://github.com/benchsci/rules_nodejs_gazelle/blob/main/gazelle/resolve.go

}
